
" set highlight search
set hlsearch
set showmatch
map :nohl :nohlsearch

" set godef
let g:godef_split = 0
let g:godef_same_file_in_same_window = 1

" set tagbar for go
let g:tagbar_type_go = {
    \ 'ctagstype' : 'go',
    \ 'kinds'     : [
        \ 'p:package',
        \ 'i:imports:1',
        \ 'c:constants',
        \ 'v:variables',
        \ 't:types',
        \ 'n:interfaces',
        \ 'w:fields',
        \ 'e:embedded',
        \ 'm:methods',
        \ 'r:constructor',
        \ 'f:functions'
    \ ],
    \ 'sro' : '.',
    \ 'kind2scope' : {
        \ 't' : 'ctype',
        \ 'n' : 'ntype'
    \ },
            \ 'scope2kind' : {
        \ 'ctype' : 't',
        \ 'ntype' : 'n'
    \ },
    \ 'ctagsbin'  : 'gotags',
    \ 'ctagsargs' : '-sort -silent'
\ }

" for replace minibuffer
nnoremap <C-l> :bnext<cr>
nnoremap <C-h> :bprevious<cr>

" for vim-airline
if isdirectory(expand("~/.vim/bundle/vim-airline/"))
    let g:airline_theme = 'dark'
endif

" for vim-jsbeautify
if isdirectory(expand("~/.vim/bundle/vim-jsbeautify"))
    map <c-f> :call JsBeautify()<cr>
    autocmd FileType javascript noremap <buffer>  <c-f> :call JsBeautify()<cr>
    autocmd FileType json noremap <buffer> <c-f> :call JsonBeautify()<cr>
    autocmd FileType jsx noremap <buffer> <c-f> :call JsxBeautify()<cr>
    autocmd FileType html noremap <buffer> <c-f> :call HtmlBeautify()<cr>
    autocmd FileType css noremap <buffer> <c-f> :call CSSBeautify()<cr>"
endif

" close mouse
set mouse=

" set whichwrap
set whichwrap=

" For iTerm2 Transparent
let g:solarized_termcolors=256
let g:solarized_termtrans=1
let g:indent_guides_auto_colors = 0

" set nocursorline
set nocursorline

" set for work with tmux
set clipboard="

